!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
PRODUCTION	gulpfile.babel.js	/^const PRODUCTION = yargs.argv.prod;$/;"	V
build	gulpfile.babel.js	/^export const build = gulp.series(clean, gulp.parallel(styles, scripts, images, copy));$/;"	E
bundle	gulpfile.babel.js	/^export const bundle = gulp.series(build, compress);$/;"	E
clean	gulpfile.babel.js	/^export const clean = () => del(['dist']);$/;"	E
compress	gulpfile.babel.js	/^export const bundle = gulp.series(build, compress);$/;"	E
compress	gulpfile.babel.js	/^export const compress = () => {$/;"	E
copy	gulpfile.babel.js	/^export const copy = () => {$/;"	E
dest	gulpfile.babel.js	/^        dest: 'dist\/assets\/css'$/;"	P
dest	gulpfile.babel.js	/^        dest: 'dist\/assets\/fonts'$/;"	P
dest	gulpfile.babel.js	/^        dest: 'dist\/assets\/images'$/;"	P
dest	gulpfile.babel.js	/^        dest: 'dist\/assets\/js'$/;"	P
dest	gulpfile.babel.js	/^        dest: 'packaged'$/;"	P
dev	gulpfile.babel.js	/^export const dev = gulp.series(clean, gulp.parallel(styles, scripts, images, copy), serve, watch);$/;"	E
devtool	gulpfile.babel.js	/^            devtool: !PRODUCTION ? 'inline-source-map' : false,$/;"	P
filename	gulpfile.babel.js	/^                filename: '[name].js'$/;"	P
gulp	gulpfile.babel.js	/^export const build = gulp.series(clean, gulp.parallel(styles, scripts, images, copy));$/;"	E
gulp	gulpfile.babel.js	/^export const dev = gulp.series(clean, gulp.parallel(styles, scripts, images, copy), serve, watch);$/;"	E
images	gulpfile.babel.js	/^export const images = () => {$/;"	E
loader	gulpfile.babel.js	/^                            loader: 'babel-loader',$/;"	P
mode	gulpfile.babel.js	/^            mode: PRODUCTION ? 'production' : 'development' \/\/ add this$/;"	P
path	gulpfile.babel.js	/^const path = {$/;"	O
presets	gulpfile.babel.js	/^                                presets: ['@babel\/preset-env']$/;"	P
proxy	gulpfile.babel.js	/^        proxy: "julia-garcin.local"$/;"	P
reload	gulpfile.babel.js	/^export const reload = (done) => {$/;"	E
rules	gulpfile.babel.js	/^                rules: [$/;"	P
scripts	gulpfile.babel.js	/^export const build = gulp.series(clean, gulp.parallel(styles, scripts, images, copy));$/;"	E
scripts	gulpfile.babel.js	/^export const dev = gulp.series(clean, gulp.parallel(styles, scripts, images, copy), serve, watch);$/;"	E
scripts	gulpfile.babel.js	/^export const scripts = () => {$/;"	E
serve	gulpfile.babel.js	/^export const serve = (done) => {$/;"	E
server	gulpfile.babel.js	/^const server = browserSync.create();$/;"	V
src	gulpfile.babel.js	/^        src: 'src\/assets\/images\/**\/*.{jpg, png, svg, gif, jpeg}',$/;"	P
src	gulpfile.babel.js	/^        src: ['**\/*', '!.DS_Store', '!node_modules{,\/**}', '!packaged{,\/**}', '!src{,\/**}', '!.babelrc' , '!gitignore' , '!gulpfile.babel.js' , '!package.json' , '!package-lock.json'],$/;"	P
src	gulpfile.babel.js	/^        src: ['src\/assets\/fonts\/**\/*', '!src\/assets\/{images,js,scss}', '!src\/assets\/{images,js,scss}\/**\/*'],$/;"	P
src	gulpfile.babel.js	/^        src: ['src\/assets\/js\/main.js','src\/assets\/js\/admin.js'],$/;"	P
src	gulpfile.babel.js	/^        src: ['src\/assets\/scss\/bundle.scss', 'src\/assets\/scss\/admin.scss'],$/;"	P
styles	gulpfile.babel.js	/^export const styles = () => {$/;"	E
test	gulpfile.babel.js	/^                        test: \/\\.m?js$\/,$/;"	P
watch	gulpfile.babel.js	/^export const watch = () => {$/;"	E
